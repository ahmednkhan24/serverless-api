AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabaseName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /serverless-api/{DEPLOYMENT_ENVIRONMENT}/database_name

Globals:
  Function:
    MemorySize: 128
    Timeout: 10
    Runtime: nodejs14.x
    Tracing: Active
    Environment:
      Variables:
        DB_TABLE_NAME: !Ref DatabaseName

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DatabaseName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AuthorizerFunction
      CodeUri: dist/authorizer
      Handler: index.handler

  # Allow any API in the account to invoke the lambda authorizer function
  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AuthorizerFunction
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/authorizers/*

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - '*'
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - http://*
          - https://*
      Auth:
        Authorizers:
          # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            AuthorizerPayloadFormatVersion: '2.0'
            EnableSimpleResponses: False
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaAuthorizer

  GetAllData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetAllDataFunction
      CodeUri: dist/databaseController
      Handler: index.getAllItemsHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DatabaseName
      Events:
        GetAllDataEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'

  GetData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetDataFunction
      CodeUri: dist/databaseController
      Handler: index.GetItemHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DatabaseName
      Events:
        GetAllDataEvent:
          Type: HttpApi
          Properties:
            Path: /{id}
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'

  CreateData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateDataFunction
      CodeUri: dist/databaseController
      Handler: index.createItemHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DatabaseName
      Events:
        CreateDataEvent:
          Type: HttpApi
          Properties:
            Path: /create
            Method: POST
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'

Outputs:
  HttpApiURL:
    Description: 'HTTP API URL'
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
